# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

permissions:
    contents: read
    checks: write
    pull-requests: write
    issues: write
    packages: write

env:
    # Use docker.io for Docker Hub if empty
    REGISTRY: ghcr.io
    # github.repository as <account>/<repo>
    IMAGE_NAME: ${{ github.repository }}
    RUSTFLAGS: --deny=warnings

jobs:
    cargo-build:
        name: Cargo build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  show-progress: false

            - name: Cache dependencies
              uses: actions/cache@v4
              env:
                  CACHE_NAME: cargo-cache-dependencies
              with:
                  path: |
                      ~/.cargo
                      ./target
                  key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-build
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
                      ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

            - name: Set up mold
              uses: rui314/setup-mold@v1

            - name: Set up toolchain
              shell: bash
              run: |
                  rm ${HOME}/.cargo/bin/cargo-fmt
                  rm ${HOME}/.cargo/bin/rust-analyzer
                  rm ${HOME}/.cargo/bin/rustfmt

                  rustup self update
                  rustup update
                  rustup show active-toolchain || rustup toolchain install
                  rustup show

                  cargo --version

            - name: Install rustfmt
              shell: bash
              run: |
                  rustup component add rustfmt

                  # restore symlinks
                  rustup update

            - name: Check formatting
              shell: bash
              run: |
                  cargo fmt --all -- --check --verbose

            - name: Build
              shell: bash
              run: |
                  cargo build --all-targets --workspace --verbose

    docker-build:
        name: Build Docker container
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        env:
            APPLICATION_NAME: PLACEHOLDER # overridden in step 'Set application name', this is merely to satisfy the linter
            PATH_TO_TAR: PLACEHOLDER # same ^
            UNIQUE_TAG: PLACEHOLDER # same ^
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  show-progress: false

            - name: Cache dependencies
              uses: actions/cache@v4
              env:
                  CACHE_NAME: cargo-cache-dependencies
              with:
                  path: |
                      ~/.cargo
                      ./target
                  key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-test
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
                      ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

            - name: Set up mold
              uses: rui314/setup-mold@v1

            - name: Set up toolchain
              shell: bash
              run: |
                  rm ${HOME}/.cargo/bin/cargo-fmt
                  rm ${HOME}/.cargo/bin/rust-analyzer
                  rm ${HOME}/.cargo/bin/rustfmt

                  rustup self update
                  rustup update
                  rustup show active-toolchain || rustup toolchain install
                  rustup show

                  cargo --version

            - name: Get binstall
              shell: bash
              working-directory: /tmp
              run: |
                  archive="cargo-binstall-x86_64-unknown-linux-musl.tgz"
                  wget "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/${archive}"

                  tar -xvf "./${archive}"

                  rm "./${archive}"

                  mv ./cargo-binstall ~/.cargo/bin/

            - name: Install cargo-edit to do set-version
              shell: bash
              run: |
                  cargo binstall cargo-edit

            - name: Set the Cargo.toml version before we copy in the data into the Docker container
              shell: bash
              run: |
                  cargo set-version ${{ needs.calculate-version.outputs.version }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # TODO validate no changes between github.event.pull_request.head.sha and the actual current sha (representing the hypothetical merge)

            - name: Lowercase the image name
              shell: bash
              run: |
                  echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}

            - name: Set Docker tag
              shell: bash
              run: |
                UNIQUE_TAG=${{ github.event.after }}
                echo "UNIQUE_TAG=${UNIQUE_TAG##*/}" >> ${GITHUB_ENV}

            # Extract metadata (tags, labels) for Docker
            # https://github.com/docker/metadata-action
            - name: Extract Docker metadata
              uses: docker/metadata-action@v5
              id: meta
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=${{ env.UNIQUE_TAG }}
                  labels: |
                      org.opencontainers.image.version=${{ github.event.after }}
                      org.opencontainers.image.source=${{ github.event.pull_request.html_url }}

            - name: Log into registry ${{ env.REGISTRY }}
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set application name
              shell: bash
              run: |
                  APPLICATION_NAME=${{ github.repository }}
                  echo "APPLICATION_NAME=${APPLICATION_NAME##*/}" >> ${GITHUB_ENV}

            - name: Build Docker image
              uses: docker/build-push-action@v6
              with:
                  build-args: |
                      APPLICATION_NAME=${{ env.APPLICATION_NAME }}
                  context: .
                  # this container is THE PR's artifact, and we will re-tag it
                  # once the PR has been accepted
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ env.APPLICATION_NAME }}
                  cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ env.APPLICATION_NAME }},mode=max
                  platforms: linux/amd64, linux/arm64
                  outputs: type=oci,dest=/tmp/${{ env.UNIQUE_TAG }}.tar

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: container-${{ env.APPLICATION_NAME }}
                  path: /tmp/${{ env.UNIQUE_TAG }}.tar
                  if-no-files-found: error
                  retention-days: 1

    docker-publish:
        name: Publish Docker container
        runs-on: ubuntu-latest
        needs:
            - docker-build
        env:
            APPLICATION_NAME: PLACEHOLDER # overridden in step 'Set application name', this is merely to satisfy the linter
            UNIQUE_TAG: PLACEHOLDER # same ^
        if: github.event_name == 'push'
        steps:
            - name: Set up Docker
              uses: docker/setup-docker-action@v4
              with:
                  daemon-config: |
                      {
                        "features": {
                          "containerd-snapshotter": true
                        }
                      }

            - name: Log into registry ${{ env.REGISTRY }}
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Lowercase the image name
              shell: bash
              run: |
                  echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}

            - name: Set application name
              shell: bash
              run: |
                  APPLICATION_NAME=${{ github.repository }}
                  echo "APPLICATION_NAME=${APPLICATION_NAME##*/}" >> ${GITHUB_ENV}

            - name: Set Docker tag (which is also the filename.tar)
              shell: bash
              run: |
                  UNIQUE_TAG=${{ github.event.after }}
                  echo "UNIQUE_TAG=${UNIQUE_TAG##*/}" >> ${GITHUB_ENV}

            - name: Extract Docker metadata
              uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
              id: meta
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=pr,suffix=-latest
                      type=raw,value=${{ env.UNIQUE_TAG }}

            - name: Download artifact
              uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
              id: artifact
              with:
                  path: /tmp/container/
                  name: container-${{ env.APPLICATION_NAME }}

            - name: Load images from artifacts
              shell: bash
              run: |
                  docker load --input ${{ steps.artifact.outputs.download-path }}/${{ env.UNIQUE_TAG }}.tar

            - name: Push image to register
              shell: bash
              run: |
                  base_tag=$(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:%s ' ${{ env.UNIQUE_TAG }})
                  latest_tag=$(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:%s ' latest)

                  docker push ${base_tag}

                  docker tag ${base_tag} ${latest_tag}
                  docker push ${latest_tag}

            - name: Set new tags on pushed image
              shell: bash
              working-directory: /tmp/container/
              run: |
                  new_tags="${{ join(steps.meta.outputs.tags, ' ') }}"
                  new_tags=$(printf -- '--tag %s ' $new_tags)

                  base_tag=$(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:%s ' ${{ env.UNIQUE_TAG }})

                  docker buildx imagetools create $new_tags $base_tag

                  for new_tag in $(echo "${{ join(steps.meta.outputs.tags, ' ') }}"); do
                    echo "${new_tag}:"
                    docker buildx imagetools inspect --raw $new_tag
                    echo "" # newline
                  done

    all-done:
        name: All done
        # this is the job that should be marked as required on GitHub. It's the only one that'll reliably trigger
        # when any upstream fails: success
        # when all upstream skips: pass
        # when all upstream success: success
        # combination of upstream skip and success: success
        runs-on: ubuntu-latest
        needs:
            - cargo-build
            - docker-build
            - docker-publish
        if: |
            always()
        steps:
            - name: Fail!
              shell: bash
              if: |
                  contains(needs.*.result, 'failure') ||
                  contains(needs.*.result, 'cancelled')
              run: |
                  echo "One / more upstream failed or was cancelled. Failing job..."

                  exit 1

            - name: Success!
              shell: bash
              run: |
                  echo "Great success!"
